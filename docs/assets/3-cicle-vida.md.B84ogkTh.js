import{_ as i,c as s,o as a,ai as r}from"./chunks/framework.D8bBpvdD.js";const m=JSON.parse('{"title":"3. Cicle de Vida d’un Programa","description":"","frontmatter":{},"headers":[],"relativePath":"3-cicle-vida.md","filePath":"3-cicle-vida.md"}'),t={name:"3-cicle-vida.md"};function n(o,e,l,c,d,u){return a(),s("div",null,e[0]||(e[0]=[r('<h1 id="_3-cicle-de-vida-d-un-programa" tabindex="-1">3. Cicle de Vida d’un Programa <a class="header-anchor" href="#_3-cicle-de-vida-d-un-programa" aria-label="Permalink to &quot;3. Cicle de Vida d’un Programa&quot;">​</a></h1><p>La creació d’un programa de programari segueix un procés estructurat que generalment es dividix en cinc fases principals: <strong>definició</strong>, <strong>disseny</strong>, <strong>desenvolupament</strong>, <strong>implementació</strong> i <strong>manteniment</strong>.</p><h2 id="_3-1-fase-de-definicio-o-analisi" tabindex="-1">3.1. Fase de Definició o Anàlisi <a class="header-anchor" href="#_3-1-fase-de-definicio-o-analisi" aria-label="Permalink to &quot;3.1. Fase de Definició o Anàlisi&quot;">​</a></h2><p>La fase de definició és com planificar un viatge abans d&#39;emprendre’l. En esta etapa, es tracta d’entendre exactament què es vol aconseguir amb el programa.</p><h3 id="activitats-principals" tabindex="-1">Activitats Principals <a class="header-anchor" href="#activitats-principals" aria-label="Permalink to &quot;Activitats Principals&quot;">​</a></h3><ul><li><p><strong>Definició del Problema</strong>: Es comença per definir quin tipus d’<strong>informació va a manejar</strong> el programa, quines tasques o <strong>funcions ha de poder realitzar</strong>, i com va a interactuar amb altres parts del sistema o amb els usuaris.</p></li><li><p><strong>Recopilació de Requisits</strong>: Identificació de qualsevol <strong>condició o restricció</strong> que puga influir en el desenvolupament del programa. A més, es detallen les &quot;<strong>interfícies</strong>&quot;, que són els punts de connexió del programa amb altres sistemes o components.</p></li><li><p><strong>Documentació</strong>: Establiment dels <strong>criteris de validació</strong>, que són les formes en què comprovarem si el programa funciona com s’espera. Al final d&#39;esta fase, es documenta tot de manera detallada, incloent la situació inicial, els resultats esperats i la situació final desitjada.</p></li></ul><blockquote><p><em><strong>Exemple: Aplicació per a planificar un viatge</strong></em></p><ul><li><strong>La informació que el sistema ha d&#39;utilitzar</strong>: Dades com la ciutat d’origen, la ciutat de destinació, les dates de viatge, els punts d’interés a visitar, el pressupost disponible, entre altres.</li><li><strong>Les funcions que ha de realitzar</strong>: Permetre buscar vols i allotjaments, recomanar itineraris d&#39;acord amb els interessos de l’usuari, calcular costos aproximats del viatge, oferir opcions de transport local, etc.</li><li><strong>Les condicions o restriccions existents</strong>: Considerar restriccions de pressupost, disponibilitat de dates, restriccions de viatge degut a pandèmies o situacions d’emergència, requisits de visat, etc.</li><li><strong>Les interfícies del sistema</strong>: Connexió amb serveis de tercers com aerolínies, hotels i plataformes de mapes per a mostrar rutes i ubicacions.</li><li><strong>Criteris de validació</strong>: Comprovar que l’aplicació pot generar itineraris que respecten les preferències i restriccions de l’usuari, assegurar que les dades de vols i hotels s’actualitzen correctament, i verificar que les recomanacions siguen rellevants.</li></ul></blockquote><h2 id="_3-2-fase-de-disseny" tabindex="-1">3.2. Fase de Disseny <a class="header-anchor" href="#_3-2-fase-de-disseny" aria-label="Permalink to &quot;3.2. Fase de Disseny&quot;">​</a></h2><p>La fase de disseny és on es planifica com es construirà el programari. Es dissenya l’arquitectura del sistema i es detallen els components i les seues interaccions.</p><h3 id="activitats-principals-1" tabindex="-1">Activitats Principals <a class="header-anchor" href="#activitats-principals-1" aria-label="Permalink to &quot;Activitats Principals&quot;">​</a></h3><ul><li><p><strong>Disseny d&#39;Alt Nivell</strong>: Creació de l’arquitectura del sistema, definint els principals components i com interactuen entre si. Açò inclou decisions sobre patrons de disseny, com arquitectura en capes, microserveis, etc.</p></li><li><p><strong>Disseny Detallat</strong>: Especificació detallada de les estructures de dades, algoritmes i la implementació dels components del programari. Ací es defineixen els mètodes específics que cada component utilitzarà per a complir amb els requisits funcionals i no funcionals.</p></li><li><p><strong>Representació d&#39;algoritmes</strong>: Permet visualitzar els passos necessaris per a resoldre un problema, identificar possibles errors o millores. Aquesta representació pot realitzar-se de diverses maneres, com diagrames de flux, pseudocodi, taules de decisió i diagrames Nassi–Shneiderman, cadascun oferint una perspectiva diferent.</p></li><li><p><strong>Disseny d&#39;Interfície</strong>: Disseny de la interfície d&#39;usuari (UI) i la interacció amb el sistema (UX). En esta etapa es poden utilitzar ferramentes com <strong>mockups</strong>, <strong>wireframes</strong> i <strong>prototips</strong> interactius per a planificar i provar les interfícies d&#39;usuari abans de la implementació real.</p></li></ul><blockquote><p><em><strong>Exemple: Aplicació per a planejar un viatge</strong></em></p><ol><li><strong>Estructures de dades</strong>: Es defineixen taules o estructures per a gestionar dades de ciutats, vols, allotjaments i activitats.</li><li><strong>Funcions del programa</strong>: Es planifiquen funcions com la cerca de vols, el càlcul del cost total del viatge, i recomanacions d&#39;activitats basades en les preferències de l&#39;usuari.</li><li><strong>Disseny descendent</strong>: Es descompon el problema principal en subproblemes més simples, que després es resolen individualment. Per exemple, en lloc de dissenyar una única funció per a la &quot;cerca de vols&quot;, es divideix en subfuncions com &quot;buscar vols disponibles&quot;, &quot;filtrar per preu&quot;, &quot;ordenar per hora de sortida&quot;, etc.</li></ol></blockquote><h2 id="_3-3-fase-de-desenvolupament" tabindex="-1">3.3. Fase de Desenvolupament <a class="header-anchor" href="#_3-3-fase-de-desenvolupament" aria-label="Permalink to &quot;3.3. Fase de Desenvolupament&quot;">​</a></h2><p>La fase de desenvolupament és on es converteix el disseny en un programari funcional a través de la codificació, proves i documentació.</p><h3 id="_3-3-1-codificacio" tabindex="-1">3.3.1 Codificació <a class="header-anchor" href="#_3-3-1-codificacio" aria-label="Permalink to &quot;3.3.1 Codificació&quot;">​</a></h3><p>Aquí és on els desenvolupadors comencen a escriure el codi del programari basant-se en el disseny detallat.</p><ul><li><p><strong>Escriptura del Codi</strong>: Implementació del programari en un llenguatge de programació apropiat com <strong>Python</strong>, <strong>Java</strong>, <strong>JavaScript</strong>, etc.</p></li><li><p><strong>Documentació del Codi</strong>: Incloure comentaris i documentació per facilitar la comprensió i manteniment del codi. Aquesta documentació inclou comentaris inline, documentació de mètodes, i guies d&#39;estil de codi.</p></li><li><p><strong>Normes de Codificació</strong>: Ús d&#39;estructures clares, convencions de nomenclatura descriptives, i comentaris útils per assegurar un codi mantenible. A més, es segueixen pràctiques com <strong>principis SOLID</strong>, <strong>DRY</strong> (Don’t Repeat Yourself), i <strong>KISS</strong> (Keep It Simple, Stupid).</p></li></ul><blockquote><p><em><strong>Exemple: Aplicació per planificar un viatge</strong></em></p><ul><li><strong>Implementació de funcions</strong>: Es escriuen funcions per realitzar cerques de vols, calcular el cost total del viatge, i recomanar activitats basades en les preferències de l&#39;usuari.</li><li><strong>Maneig de dades</strong>: Es estructuren les dades en taules adequades, utilitzant bases de dades com <strong>MySQL</strong>, <strong>PostgreSQL</strong>, o <strong>MongoDB</strong> depenent de les necessitats.</li><li><strong>Eines de desenvolupament</strong>: Ús de <strong>Git</strong> per control de versions, i <strong>Jenkins</strong> o <strong>GitHub Actions</strong> per integració contínua.</li></ul></blockquote><h3 id="_3-3-2-proves" tabindex="-1">3.3.2 Proves <a class="header-anchor" href="#_3-3-2-proves" aria-label="Permalink to &quot;3.3.2 Proves&quot;">​</a></h3><p>Les proves són fonamentals per garantir que el programari funcioni correctament i compleixi amb els requisits especificats.</p><ul><li><p><strong>Proves Unitàries</strong>: Verificació de components individuals del programari per assegurar que funcionen correctament. Aquestes proves solen automatitzar-se usant eines com <strong>JUnit</strong> (per a Java), <strong>pytest</strong> (per a Python), o <strong>Jest</strong> (per a JavaScript).</p></li><li><p><strong>Proves d&#39;Integració</strong>: Avaluació de la interacció entre components per garantir que el sistema complet funcioni correctament. S&#39;utilitzen marcs de prova d&#39;integració com <strong>Selenium</strong> per proves d&#39;interface o <strong>Postman</strong> per proves d&#39;API.</p></li><li><p><strong>Proves del Sistema</strong>: Avaluació del programari en el seu conjunt per assegurar que compleix amb els requisits i especificacions. Es realitzen proves d&#39;estrès, rendiment, i càrrega.</p></li><li><p><strong>Proves d&#39;Aceptació</strong>: Validació del programari amb els usuaris finals per confirmar que satisfà les seves necessitats i expectatives. Aquí es poden realitzar proves de <strong>usabilitat</strong> i <strong>experiència d&#39;usuari</strong>.</p></li></ul><blockquote><p><em><strong>Exemple: Aplicació per planificar un viatge</strong></em></p><ul><li><strong>Proves unitàries</strong>: Es proven individualment funcions com la cerca de vols i la generació d&#39;itineraris.</li><li><strong>Proves d&#39;integració</strong>: Es verifica que les funcions de cerca de vols i allotjament funcionen correctament juntes i s&#39;integren amb l&#39;API de tercers.</li><li><strong>Proves del sistema</strong>: Es simula un gran nombre d&#39;usuaris buscant vols i allotjaments simultàniament per avaluar el rendiment sota càrrega.</li><li><strong>Proves d&#39;acceptació</strong>: Es realitza una sessió de prova amb usuaris reals que planifiquen un viatge utilitzant l&#39;aplicació per assegurar-se que compleix amb les seves expectatives.</li></ul></blockquote><h2 id="_3-4-fase-d-implementacio" tabindex="-1">3.4. Fase d&#39;Implementació <a class="header-anchor" href="#_3-4-fase-d-implementacio" aria-label="Permalink to &quot;3.4. Fase d&#39;Implementació&quot;">​</a></h2><p>La fase d&#39;implementació se centra a fer que el programari estigui disponible per al seu ús pels usuaris finals.</p><h3 id="activitats-principals-2" tabindex="-1">Activitats Principals <a class="header-anchor" href="#activitats-principals-2" aria-label="Permalink to &quot;Activitats Principals&quot;">​</a></h3><ul><li><p><strong>Desplegament</strong>: Instal·lació del programari en l&#39;entorn de producció. Això pot implicar la configuració de servidors, serveis en el núvol com <strong>AWS</strong>, <strong>Azure</strong>, o <strong>Google Cloud</strong>, i la instal·lació de bases de dades i altres components del sistema.</p></li><li><p><strong>Formació d&#39;Usuaris</strong>: Capacitar els usuaris finals sobre l&#39;ús del programari. Això pot incloure tutorials interactius, webinars, o sessions de formació in situ.</p></li><li><p><strong>Documentació d&#39;Usuari</strong>: Creació de manuals i guies per als usuaris finals, que expliquen com utilitzar les diferents funcions del programari. Es poden usar eines com <strong>MadCap Flare</strong> o <strong>Adobe RoboHelp</strong> per crear aquesta documentació.</p></li></ul><blockquote><p><em><strong>Exemple: Aplicació per planificar un viatge</strong></em></p><ul><li><strong>Desplegament</strong>: El programari es desplega en servidors accessibles per als usuaris, utilitzant eines com <strong>Docker</strong> per a la contenització i <strong>Kubernetes</strong> per a l&#39;orquestració de contenidors.</li><li><strong>Formació d&#39;Usuaris</strong>: S&#39;organitzen webinars per ensenyar als usuaris com planificar viatges utilitzant l&#39;aplicació.</li><li><strong>Documentació d&#39;Usuari</strong>: Es creen manuals i vídeos que expliquen com utilitzar les funcions principals, com la cerca de vols i la creació d&#39;itineraris.</li></ul></blockquote><h2 id="_3-5-fase-de-manteniment" tabindex="-1">3.5. Fase de Manteniment <a class="header-anchor" href="#_3-5-fase-de-manteniment" aria-label="Permalink to &quot;3.5. Fase de Manteniment&quot;">​</a></h2><p>La fase de manteniment assegura que el programari continuï funcionant correctament i s&#39;adapti a nous requisits o canvis en l&#39;entorn operatiu.</p><h3 id="_3-5-1-activitats-principals" tabindex="-1">3.5.1 Activitats Principals <a class="header-anchor" href="#_3-5-1-activitats-principals" aria-label="Permalink to &quot;3.5.1 Activitats Principals&quot;">​</a></h3><ul><li><p><strong>Correcció d&#39;Errors</strong>: Identificació i solució de problemes que surten després de la implementació. Els errors es gestionen utilitzant sistemes de gestió d&#39;incidències com <strong>JIRA</strong> o <strong>Bugzilla</strong>.</p></li><li><p><strong>Actualització i Millores</strong>: Addició de noves característiques i millores en el programari. Això pot incloure la implementació de noves funcions sol·licitades pels usuaris o millores de rendiment.</p></li><li><p><strong>Adaptació a Nous Requisits</strong>: Modificació del programari per satisfer canvis en els requisits de l&#39;usuari o en l&#39;entorn, com noves normatives legals o canvis tecnològics.</p></li></ul><h3 id="_3-5-2-proces-de-manteniment" tabindex="-1">3.5.2 Procés de Manteniment <a class="header-anchor" href="#_3-5-2-proces-de-manteniment" aria-label="Permalink to &quot;3.5.2 Procés de Manteniment&quot;">​</a></h3><p>El procés de manteniment generalment segueix un cicle iteratiu que inclou:</p><ul><li><p><strong>Avaluació de Problemes</strong>: Identificació i avaluació de problemes reportats pels usuaris o detectats a través de monitoratge. Aquesta avaluació ajuda a determinar la prioritat i l&#39;impacte dels problemes en el funcionament del programari.</p></li><li><p><strong>Implementació de Solucions</strong>: Desenvolupar i aplicar les solucions necessàries per corregir problemes i realitzar millores. Això pot involucrar canvis en el codi, actualització de documentació, i modificació de configuracions del sistema.</p></li><li><p><strong>Proves Posteriors als Canvis</strong>: Després d&#39;aplicar les correccions i millores, és fonamental realitzar proves per assegurar-se que les modificacions no han introduït nous errors i que el programari segueix funcionant correctament. Les proves poden incloure proves unitàries, d&#39;integració i del sistema.</p></li><li><p><strong>Documentació i Comunicació</strong>: Mantenir una documentació actualitzada dels canvis realitzats i comunicar aquests canvis als usuaris i altres interessats és essencial per al bon manteniment del programari.</p></li></ul><blockquote><p><em><strong>Exemple: Aplicació per planificar un viatge</strong></em></p><ul><li><strong>Correcció d&#39;Errors</strong>: Es corregeixen errors detectats pels usuaris o identificats mitjançant proves continuades, com problemes amb la connexió a serveis de tercers o errors en la generació d&#39;itineraris.</li><li><strong>Actualització i Millores</strong>: S&#39;afegeixen noves funcions, com suggeriments personalitzats basats en l&#39;historial de viatges de l&#39;usuari, o millores en la velocitat de la cerca de vols.</li><li><strong>Adaptació a Nous Requisits</strong>: S&#39;adapta l&#39;aplicació a nous requeriments, com canvis en polítiques de viatge degut a situacions globals o la integració amb noves APIs de serveis de viatges.</li></ul></blockquote>',35)]))}const g=i(t,[["render",n]]);export{m as __pageData,g as default};
