import{_ as o,C as i,c as u,o as p,j as e,ai as d,a as l,G as a,w as n}from"./chunks/framework.BLDR7gqa.js";const m="/UF1/UF1dfgsdh/uf1/5.2.png",A=JSON.parse(`{"title":"4. Representació d'Algoritmes","description":"","frontmatter":{},"headers":[],"relativePath":"4-algoritmes.md","filePath":"4-algoritmes.md"}`),g={name:"4-algoritmes.md"};function c(b,s,x,f,q,_){const r=i("PluginTabsTab"),t=i("PluginTabs");return p(),u("div",null,[s[5]||(s[5]=e("h1",{id:"_4-representacio-d-algoritmes",tabindex:"-1"},[l("4. Representació d'Algoritmes "),e("a",{class:"header-anchor",href:"#_4-representacio-d-algoritmes","aria-label":`Permalink to "4. Representació d'Algoritmes"`},"​")],-1)),s[6]||(s[6]=e("p",null,"És necessari poder representar les instruccions o els passos d'un algoritme d'una manera ordenada que es puguen entendre.",-1)),s[7]||(s[7]=e("p",null,"A primera vista es pot pensar que es podrien descriure els passos usant el llenguatge natural. Però el problema és que el llenguatge natural pot resultar imprecís i ambigu.",-1)),s[8]||(s[8]=e("p",null,"Per això existeixen millors tècniques per a poder representar els algoritmes com pseudocodi o els diagrames de flux.",-1)),s[9]||(s[9]=e("h2",{id:"_4-1-pseudocodi",tabindex:"-1"},[l("4.1 Pseudocodi "),e("a",{class:"header-anchor",href:"#_4-1-pseudocodi","aria-label":'Permalink to "4.1 Pseudocodi"'},"​")],-1)),s[10]||(s[10]=e("p",null,"El Pseudocodi és una tècnica que permet substituir les instruccions d'un programa per frases que descriguen què ha de fer-se en llenguatge natural.",-1)),e("blockquote",null,[s[2]||(s[2]=e("p",null,[e("em",null,[e("strong",null,"Exemple:")])],-1)),s[3]||(s[3]=e("p",null,`En el següent exemple es poden veure dos algoritmes que indiquen si un nombre és parell o imparell. Ambdós realitzen la mateixa tasca, però l'algoritme B és més eficient que l'algoritme A. Això es deu al fet que l'algoritme B tarda un temps constant, mentre que l'algoritme A tardarà més com més gran siga el valor de "n".`,-1)),a(t,null,{default:n(()=>[a(r,{label:"Algoritme A"},{default:n(()=>s[0]||(s[0]=[e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"INICI")]),l(`
`),e("span",{class:"line"},[e("span",null,'  1. Escriure "Introdueix valor per a n".')]),l(`
`),e("span",{class:"line"},[e("span",null,"  2. Llegir n.  ")]),l(`
`),e("span",{class:"line"},[e("span",null,'  3. Si n = 2 escriure "És parell"')]),l(`
`),e("span",{class:"line"},[e("span",null,'  4. Si no, si n = 1 escriure "És imparell"')]),l(`
`),e("span",{class:"line"},[e("span",null,"  5. Si no, n = n - 2 i tornem al pas 3.")]),l(`
`),e("span",{class:"line"},[e("span",null,"FI")])])])],-1)])),_:1,__:[0]}),a(r,{label:"Algoritme B"},{default:n(()=>s[1]||(s[1]=[e("div",{class:"language- vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"}),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",null,"INICI")]),l(`
`),e("span",{class:"line"},[e("span",null,'  1. Escriure "Introdueix valor per a n".')]),l(`
`),e("span",{class:"line"},[e("span",null,"  2. Llegir n.  ")]),l(`
`),e("span",{class:"line"},[e("span",null,"  3. M ← n % 2")]),l(`
`),e("span",{class:"line"},[e("span",null,'  4. Si M = 0, escriure "És parell"')]),l(`
`),e("span",{class:"line"},[e("span",null,'  5. Si no, escriure "És imparell"')]),l(`
`),e("span",{class:"line"},[e("span",null,"FI")])])])],-1)])),_:1,__:[1]})]),_:1}),s[4]||(s[4]=e("p",null,"En crear un algoritme, no sols és important que realitze la seua tasca, sinó que també siga eficient i consuma la menor quantitat de recursos possible.",-1))]),s[11]||(s[11]=d("",5))])}const P=o(g,[["render",c]]);export{A as __pageData,P as default};
